---
import ThemeToggle from './ThemeToggle.astro';
import { Briefcase, Code2, User, Mail } from '@lucide/astro';
const navItems = [
	{
		title: 'Experiencia',
		label: 'experiencia',
		url: '/#experiencia',
		icon: Briefcase
	},
	{
		title: 'Proyectos',
		label: 'proyectos',
		url: '/#proyectos',
		icon: Code2
	},
	{
		title: 'Sobre m√≠',
		label: 'sobre-mi',
		url: '/#sobre-mi',
		icon: User
	},
	{
		title: 'Contacto',
		label: 'contacto',
		url: 'mailto:contacto@srgobi.com',
		icon: Mail
	}
];
---

<header class="md:visible invisible fixed top-0 z-20 flex items-center justify-center w-full mx-auto mt-2">
	<nav
		class={`
	  w-2/4 h-full
	  rounded-full md:px-6 px-3
	  flex flex-wrap flex-row items-center justify-center
	  bg-neutral-200/70 dark:bg-black/50 backdrop-blur-sm
	`}
	>
		{
			navItems.map((link) => (
				<a class="text-zinc-800 dark:text-zinc-100 hover:bg-white/10 p-1 rounded-full px-2 sm:px-3 transition ease-in text-sm sm:text-base capitalize flex items-center gap-1" aria-label={link.label} href={link.url}>
					{link.title}
				</a>
			))
		}
		<ThemeToggle />
	</nav>
</header>

<div class="md:invisible visible fixed bottom-0 left-0 z-50 w-full h-16 border-t border-zinc-500 bg-neutral-200/70 dark:bg-black/50 backdrop-blur-sm">
	<div class="grid h-full max-w-lg grid-cols-4 mx-auto font-medium">
		{
			navItems.map((link) => (
				<a href={link.url} class="inline-flex flex-col items-center justify-center border-zinc-200 border-x hover:bg-white/10 dark:hover:bg-zinc-800 group dark:border-zinc-600" aria-label={link.label}>
					<link.icon size={22} class="text-zinc-500 dark:text-zinc-400 group-hover:text-blue-600 dark:group-hover:text-blue-500" />
					<span class="text-sm text-zinc-500 dark:text-zinc-400 group-hover:text-blue-600 dark:group-hover:text-blue-500">{link.title}</span>
				</a>
			))
		}
	</div>
</div>

<script>
	document.addEventListener('astro:page-load', () => {
		const sections = document.querySelectorAll('section');
		const navItems = document.querySelectorAll('header nav a');

		const callback = (entries: any[]) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					navItems.forEach((item) => {
						if (item.getAttribute('aria-label') == entry.target.id) {
							item.classList.add('text-blue-500');
						} else {
							item.classList.remove('text-blue-500');
						}
					});
				}
			});
		};

		const observer = new IntersectionObserver(callback, {
			root: null,
			rootMargin: '0px',
			threshold: 0.3
		});

		sections.forEach((section) => {
			observer.observe(section);
		});

		// Cleanup function
		document.onvisibilitychange = () => {
			if (document.visibilityState === 'hidden') {
				observer.disconnect();
			}
		};
	});
</script>

<style>
	nav {
		animation: nav-shadown 1s linear both;
		animation-timeline: scroll();
		animation-range: 0 400px;
	}
	@keyframes nav-shadown {
		to {
			box-shadow:
				0 10px 15px -3px rgba(0, 0, 0, 0.1),
				0 4px 6px -2px rgba(0, 0, 0, 0.05);
		}
	}
</style>
